
Cosmos Db is global and supports multi-model
primary data is written in multiple regions
underlying architecture is no sql supports json , enntreprise ready

% core apis for cosmos db are
Core SQL API: Best for structured data and rich queries. You will see json data returned here
Scenario: Customer database for e-commerce.
u need to run complex queries for  to find all customers who purchased specific products, filter them by location, and calculate their total spending.

MongoDB API: Perfect for MongoDB workloads.
Scenario: Social media app needing global distribution.
you need to scale globally to handle millions of users across different regions.


Cassandra API: Ideal for large, distributed datasets.
Scenario: IoT real-time analytics platform.
IoT platform where thousands of sensors continuously send data about temperature, humidity, and device health.
This data is time-series in nature and needs to be stored in a wide-column format for real-time analytics.


Gremlin API: Best for graph-based data (complex relationships).
Scenario: Recommendation engine for a networking platform.
You’re building a professional networking platform where users can connect with others based on their existing connections.
gremlin api will allow u to
find the shortest paths between users and suggest new connections

Table API: Good for key-value storage and simple lookups.
Scenario: Application logging system for storing logs.
Your web application generates millions of logs every day for tracking events like user activity, errors, and performance metrics
The Table API is perfect for key-value storage, where each log entry can be stored as a row with a partition key (e.g., log type)
and a row key (e.g., timestamp or log ID).

========================================================================================================
Thruput

With Cosmos DB, you can provision throughput at two levels:
Database and container level
provision thruput is like sharing the rus{request units among diff collections in db , when on particular collection needs more they get more rus}

If you have dynamic traffic and need flexibility, database-level provisioning makes sense because the RUs can be shared among containers as needed.
If you have predictable workloads and want guaranteed performance for each container,
 container-level provisioning is a better choice, as it avoids any impact between containers.
============================================================================================================================================================
Which Cosmos DB API supports the column-family database model?
cassandra
============================================================================================================================================================
Which CosmosDB API format works best with document (JSON) data?
Core Sql--> supports nomral json data
MongodB Api -- uses document in BSON format which is binary format and not text based
Gremlin for graphs -- relationships , strore info about entites--allows users to make graph queries and stores data as edges and vertices
Postgres for relational db
Casandra -- column-family database model, column oriented schema

==================================================================================================================================================================================================================================================================
Consistency Levels on Cosmos DB
Strong --> strong guarantees that read operation will return most recent version,its slow,relational dbs use this,
Eventual Consistency --> offered by no sql db, eventually all replicas will have the data if no new writes are made, requests may return old value
                         lowest latency ,worst consistency
Consistent Prefix -->  same as eventual consitency, but makes sure that reads can never see out of order writes,
                              read can get old values but not out of order
Session Consistency --> guarantess constinecy for that session,client will nevers ee old data for that session,no conflicts between clients,
                       lowest latecn for reads and writes
Bounded Staleness --> 2nd most popular,reads may lag behind writes for a small amoyt of time,
                       costs are same as strong constinecy and allows u to distribute
                      ur dbs across regions and has lower latency.


=====================================================================================================
Indexing
consistent  - whnere an item is updated
lazy     -- updating in quiter periods
none     -- no update

============================================================================================================================================

Create a cosmos db account with a default consistency level and high availability
create a nosql db
create a container with indexing poicy and autoscaled thruput

=====================================================================================================

Cosmos db Change feed processor
Change Feed Processor(a mechanism) is used to process real-time changes in a Cosmos DB container.
used to track changes (inserts and updates)
listens to a container and produces a change feed—a log of all the modifications happening in the container.
change feed can be processed by your application or service to react to those changes

Change feed estimator -
Monitors the progress of the change feed processor
Change Feed Estimator
What it is: The Change Feed Estimator gives you insights into the backlog of unprocessed documents in the change feed.
Scenario: If a large batch of documents is failing to process, the Estimator can show how far behind the system is,
helping you decide if more compute power is needed.
Usage: Helps in monitoring how much data is left to process, especially useful in case of performance bottlenecks.


Components of the Change Feed Processor:

Monitored Container: This is where your original data (like orders or transactions) is stored.
Any new inserts or updates are tracked by the change feed.
Lease Container: This is where the state (progress) of the change feed is stored.
It coordinates which worker (compute instance) processes which part of the change feed, making sure changes are processed only once.
Compute Instance: The machine or environment that hosts the change feed processor (this can be a VM, a Kubernetes pod, an App Service, etc.)
 and listens for changes.
Delegate: This is your custom code that defines what should happen when a change (like a new order) is detected.
For example, updating the inventory system, sending notifications, or updating another database.


Scenario 1: Updating Inventory After an Order
use the change feed processor to monitor the Orders container in Cosmos DB.
When a new order is inserted, the change feed will pick it up and trigger the delegate code, which will automatically
update the inventory system to reduce the available stock for the ordered items


When using the Cosmos DB change feed processor, which component is used to coordinate processing across multiple workers?
lease container
========================================================== * ======================================================================



When choosing a partition key for a Cosmos DB container, which of the following are true? (Select 2 answers).
If you have a write-heavy application, then you should choose a partition key that spreads the data out evenly across the partitions.
For example, you wouldn’t want to choose a datestamp field as the partition key because every day,
it would write all new data to the same partition, and the next day, it would do the same.
Instead, you should choose a partition key that would have a wide range of values for write requests, such as a user ID or a device ID.

If you have a read-heavy application, then you should decide on your partition key by looking at what the most common queries will be.
For example, if most of the queries will request data about a single user,
then you should choose the user ID field as the partition key.
That will make it easy for Cosmos DB to find the data, and it will also evenly distribute the data across partitions because
it will put each user’s data on a different partition.


Consistent prefix is the same as eventual consistency, except that it guarantees that read operations will never see out-of-order writes.

With strong consistency, users are guaranteed to read the latest committed write.

Session consistency guarantees consistency for each client session.
 So a client will never see data older than what it has written during a session.

Bounded staleness guarantees that reads may lag behind writes by a limited amount of time.

Eventual consistency guarantees that if no new writes are made to an item, then eventually all of the replicas will have the same value for that item.



