CI/CD is nothing else but a methodology/strategy to deploy code faster to production!
https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html
Thinks that you have an app and you want to deploy it to prod.
 What should you do? Well you should do a lot manual things, like testing it yourself,
 compiling, deploying, etc. All of this is normally done manually by a human who can make mistakes!
 And probably that guy will be awake at 2 am deploying to prod. Trust me, I've lived it.

So, how does CI/CD help?

Well, you will define an entire workflow that will build, test and deploy automatically for you! Isn't cool?

The process is defined by some steps, starting at CI which is Continuous Integration,
where you build an test your code; optionally, you could pass to Continuous Delivery,
    which deploys your built and tested app to a dev/stg/qa env (just to test again) and finally you deploy to production!


CI/CD - Continous Integration  -- feature branch --> build/ unit/integration test /archive and deploy to testing env
Acceptance testing
Continuos Deployment ---> we promote our code to production


Pipleine - entire workflow executed when you are going thru the ci/cd process
stages in pipline
1.scm checkout
2.build maven/docker images
3.test
4.deploy

JenkinsFile- pipeline as code - we have different stages -- we have templates
In a pipeline we have diff jobs
How to configure -->install a git pipline plugin
Build a pipeline --> pipeline -->pipeline script

pipeline{
    agent any

    environment{
        Name='rohit@21'
    }

    stages{
        stage('build'){
            steps{
                echo 'building'
            }
        }
        stage('test'){
            steps{
                sh 'echo testing'
                sh 'echo $NAME'
            }
        }
           stage('deploy'){
            steps{
                echo 'deploying'
            }
        }
    }
    post{
        always{
           echo 'this will always be executed'
         }
        success{
         echo 'this will be executed only when successfull'
        }
        failure{
        echo 'this will be executed when failure'
        }
        unstable{
        echo 'this will be executed when unstable'
        }
    }
}
