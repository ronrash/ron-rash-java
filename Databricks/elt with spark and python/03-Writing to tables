In this notebook, we are going to explore SQL syntax to insert and update records in Delta tables.

Lets firts create delta tables using ctas statements since they have acid functionality

create table orders
as select * from parquet.`${bookstore.dataset}/orders` --> orders table has been created and parquet has a very good schema

select * from orders
o/p

-----------------------------
its better to overwrite a table than to delete and recreate as wwe can use time travel features to go back to older versions of tables
overwirting is much faster as it does not require to list dir recursively ,it atomic , has acid support
and if the  table fails it will be in its previous state

How to do it cras statements
1.create and replace
eg
create or replace table orders
as select * from parquet.`${bookstore.dataset}/orders`;

describe history orders
o/p
version timestamp  operation
                   create or replace table as select
                   create  table as select

2. The second method to overwrite table data is to use INSERT OVERWRITE statement.
INSERT OVERWRITE orders
as select * from parquet.`${bookstore.dataset}/orders`;
this will only overwrite a new table and not create like create or replace table
it will only overwrite new records which is safer since t will not modfiy the existing scehma

describe history orders
o/p
version timestamp  operation
                   write
                   create or replace table as select
                   create  table as select

3. append records to tables
INSERT INTO orders
as select * from parquet.`${bookstore.dataset}/orders`;

this will just insert new records ,, if we rerun this it can creat duplication
To resolve this situation we can use merge into statements


==============================================================

The MERGE statement is used to perform upserts (update + insert) based on a condition.
Here's a simplified explanation with an example.

We have two datasets:
customers table (existing records).
customer_updates view (new data to merge into the customers table).

customers
customer_id	    email	            last_updated
1	            NULL	            2023-11-01
2	            alice@gmail.com	    2023-11-10
3	            bob@gmail.com	    2023-11-15

customer_updates
customer_id	        email	            last_updated
1	                john@gmail.com	    2023-12-01
3	                bob@gmail.com	    2023-11-15
4	                david@gmail.com	    2023-12-02

MERGE INTO customers c
USING customer_updates u
ON c.customer_id = u.customer_id
WHEN MATCHED AND c.email IS NULL AND u.email IS NOT NULL THEN
  UPDATE SET email = u.email, last_updated = u.last_updated
WHEN NOT MATCHED THEN
  INSERT (customer_id, email, last_updated)
  VALUES (u.customer_id, u.email, u.last_updated);

Explanation
ON c.customer_id = u.customer_id: Matches records in customers with customer_updates based on customer_id.

WHEN MATCHED:Updates records in customers if:
c.email IS NULL (existing email is missing).
u.email IS NOT NULL (new email is provided).

WHEN NOT MATCHED:Inserts records into customers if customer_id does not exist in customers.



So in a merge operation, updates, inserts and deletes are completed in a single atomic transaction.
In addition, merge operation is a great solution for avoiding duplicates when inserting records.

---------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------
First, create a temporary view from the CSV file.

CREATE OR REPLACE TEMP VIEW books_updates(book_id STRING, title STRING, category STRING)
USING CSV
OPTIONS (
    path = "path/to/books_updates.csv",
    header = 'true',
    delimiter = ";"
);

-- View the data in books_updates
SELECT * FROM books_updates;

Step 2: Merge Statement to Insert New Records
The MERGE statement checks if a book already exists in the books table by matching the book_id and title.
If it does not exist and the category is 'Computer Science', the book is inserted.

MERGE INTO books b
USING books_updates u
ON b.book_id = u.book_id AND b.title = u.title
WHEN NOT MATCHED AND u.category = 'Computer Science' THEN
INSERT (book_id, title, category)
VALUES (u.book_id, u.title, u.category);



Existing books Table:
book_id	        title	                category
1	            Spark Essentials	    Computer Science
2	            Advanced Spark	        Computer Science


books_updates Temporary View:
book_id	        title	                            category
2	            Advanced Spark	                    Computer Science
3	            Streaming with Spark	                Computer Science
4	            Data Science Basics	                    Data Science




